name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        # Generate changelog
        if [ -z "$PREV_TAG" ]; then
          echo "## What's New" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" --no-merges >> CHANGELOG.md
        else
          echo "## What's New" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --no-merges >> CHANGELOG.md
        fi

        # Set multiline output
        {
          echo 'CHANGELOG<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

  build-binaries:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: freebsd
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Set up Go
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
      with:
        go-version: '1.21'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
      run: |
        # Set binary name with extension for Windows
        BINARY_NAME=vswitch
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi

        # Build with version info
        go build -ldflags="-s -w -X main.appVersion=${{ github.ref_name }}" -o "${BINARY_NAME}" main.go

        # Create archive
        ARCHIVE_NAME="vswitch-${{ github.ref_name }}-${GOOS}-${GOARCH}"
        if [ -n "${{ matrix.goarm }}" ]; then
          ARCHIVE_NAME="${ARCHIVE_NAME}v${{ matrix.goarm }}"
        fi

        if [ "$GOOS" = "windows" ]; then
          ARCHIVE_NAME="${ARCHIVE_NAME}.zip"
          zip "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE || zip "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md
        else
          ARCHIVE_NAME="${ARCHIVE_NAME}.tar.gz"
          tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE 2>/dev/null || tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md
        fi

        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.ARCHIVE_NAME }}
        asset_name: ${{ env.ARCHIVE_NAME }}
        asset_content_type: application/octet-stream